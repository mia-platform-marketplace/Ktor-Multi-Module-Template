plugins {
    id('org.jetbrains.kotlin.jvm')
}

// If you want a dependency to be available to any module that imports this module, define it with `api` instead of
// `implementation`.
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt'

    implementation libs.bundles.impl.ktor
    testImplementation libs.bundles.testImpl.ktor

    implementation libs.bundles.impl.logback

    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation libs.bundles.impl.retrofit
    api "com.squareup.okhttp3:logging-interceptor:4.9.1"

    implementation libs.bundles.impl.jackson

    testImplementation libs.bundles.testImpl.testSuite
}

test {
    useJUnitPlatform()
}

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propsFile = file "$generatedVersionDir/version.properties"
        propsFile.parentFile.mkdirs()
        def props = new Properties()
        def projectVersion = rootProject.version.toString()
        print("Project version: ${projectVersion}")
        props.setProperty("version", projectVersion)
        propsFile.withWriter { props.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
build.dependsOn generateVersionProperties

